<?php
$GLOBALS['metabio_dataset_fields'] = array(
  'overview' => array(
    'dataset_name',
    'dataset_description',
    'tags',
    /*'data_collector',
    'data_holder_first_name',
    'data_holder_last_name',
    'data_holder_institution',
    'data_holder_email',
    'data_holder_phone',
    'data_holder_address',
    */
    'other_institutions',
    'funding_sources',
    'dataset_format',
    'responsible_person',
    'additional_comments',
    ),
  'biology' => array(
    'taxa_studied',
    'taxonomic_information', 
    'taxonomic_details'
    ),
  'study_details' => array(
    'study_design',
    'study_status',
    'sampling_approaches',
    'sampling_approaches_other',
    'study_goals',
    'study_goals_other',
    'data_types',
    'data_types_other',
    'frequency_of_sampling',
    'first_year',
    'last_year'
    ),
  'site_details' => array(
    'number_of_sites',
    'site_description',
    'site_habitat',
    'site_environment',
    'location_name',
    'geography'
    ),
  'citations' => array(
    'publications_types',
    'publications',
    'publications_hyperlinks',
    'publications_dois',
    'specimens',
    'collections'
    ),
  'files' => array(
    'files'
    ),
  'dates' => array(
    'date_created',
    'date_last_changed',
    ),
  );

$GLOBALS['metabio_people_fields']=array(
  'first_name',
  'last_name',
  'institution',
  'email',
  'phone',
  'address',
  );

include('metabio_forms.inc');
include('metabio_eml.inc');

/**
 * Implements hook_node_info().
 */
function metabio_node_info() {
  $info = array();

  $info['metabio'] = array(
    'name'        => t('Metabio Dataset'),
    'base'        => 'metabio',
    'module'      => 'metabio',
    'description' => t('Biodiversity metadata entry form for datasets.'),
    'has_body'    => FALSE
    );

  $info['metabio_list'] = array(
    'name'        => t('Metabio dataset list'),
    'base'        => 'article',
    'module'      => 'metabio',
    'description' => t('List of biodiversity metadata'),
    'has_body'    => TRUE
    );
  return $info;
}

function metabio_init() {
  $module_path = base_path().drupal_get_path('module', 'metabio');
  drupal_add_js(array(
    'metabio_path' => $module_path,
    'metabio_callback_base_url' => base_path().'metabio'
    ), 'setting');
}

// Implementation of hook_menu(): used to create a page for the form
function metabio_menu() {
  $items = array();

  $items['metabio/taxonomy_autocomplete'] = array(
    'page callback' => 'metabio_taxo_autocomplete_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    );

  $items['metabio/taxonomy_checkitis'] = array(
    'page callback' => 'metabio_taxo_checkitis_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    );

  $items['metabio/coordinate_conversion'] = array(
    'page callback' => 'metabio_coordinate_conversion_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    );

  $items['metabio/tags_autocomplete'] = array(
    'page callback' => 'metabio_tags_autocomplete_callback',
    'access arguments' => array('access content'),
    //'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    ); 

  $items['metabio/eml'] = array(
    'page callback' => 'metabio_generate_eml',
    'access arguments' => array('access content'),
    //'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    ); 



$items['metabio_search'] = array(
  'title'           => t('List of metadata entries'),
  'description'     => t('List of metadata entries'),
  'menu_name'       => 'main-menu',
  'access arguments' => array('access content'),
  'weight'          => 7,
  'access callback' => 'user_access',
  'type' => MENU_NORMAL_ITEM,
  'page callback' => '_metabio_search_form',
  );

$items['newmeta'] = array(
  'title'           => t('Add a new metadata entry'),
  'description'     => t('Metadata entry form'),
  'menu_name'       => 'main-menu',
  'access arguments' => array('create metabio content'),
  'weight'          => 8,
  'access callback' => 'user_access',
  'page callback' => 'metabio_newmeta',
  'type' => MENU_NORMAL_ITEM,
  );

$items['user/login'] = array(
  'title'           => t('Login'),
  'description'     => t('Login'),
  'menu_name'       => 'main-menu',
  'weight'          => 8,
  'access callback' => 'user_is_anonymous',
  'type' => MENU_NORMAL_ITEM,
  );

return $items;
}

/**
 * Implements hook_node_view().
 */
function metabio_node_view($node, $view_mode = 'full', $langcode = NULL) {
  if($node->type == 'metabio') {
    if($view_mode == 'full') {
      $node->content['metabio'] = array(
        '#theme' => 'metabio',
        '#metabio' => $node->metabio
        );
    }
    if($view_mode == 'eml') {
      //placeholder for eml view
    }
  }
}

/**
 * Implements hook_theme().
 */
function metabio_theme($existing, $type, $theme, $path) {

  $info['metabio'] = array(
    'template' => 'metabio',
    'render element' => 'elements',
    'path' => $path . '/templates'
    );

  foreach(array_keys($GLOBALS['metabio_dataset_fields']) as $field) {
    $info['metabio_' . $field] = array(
      'template' => 'metabio_' . $field,
      'render element' => 'elements',
      'path' => $path . '/templates'
      );
  }

  $info['metabio_contact'] = array(
    'render element' => 'element'
    );

  $info['metabio_geography'] = array(
    'render element' => 'element'
    );
  
  $info['metabio_checkbox_values'] = array(
    'render element' => 'element'
    );

  $info['metabio_checkbox_values_with_other'] = array(
    'render element' => 'element'
    );
  
  return $info;
}

function template_preprocess_metabio(&$variables) {
  $data = $variables['elements']['#metabio'];
  foreach ($data as $section => $fields) {
    foreach($fields as $key => $value) {
      if($key === 'geography' | $key==='taxonomic_details') {
        $value = $data[$section][$key];
      } else {
        $value = (is_string($data[$section][$key])) ? check_plain($data[$section][$key]) : $data[$section][$key];
      }
      $variables['content'][$section][$key] = $value;
    }
  }
}

function theme_metabio_geography($content) {
  drupal_add_js('http://maps.google.com/maps/api/js?sensor=false');
  drupal_add_js(base_path().drupal_get_path('module', 'metabio') . '/javascript/metabio.map.js');
  drupal_add_js(array('metabio_mode' => 'view'), 'setting');
  $output  = '<div id="map" width="700" height="500"></div>';
  $output .= '<input name="geography" value="' . htmlentities($content['content']) . '" style="display:none;"></input>';
  return $output;
}

function theme_metabio_contact($contact) {
  $output  = '<div class="metabio-contact metabox"><ul>';
  $person = array(
    'name' => (!empty($contact['data_holder_first_name']) && !empty($contact['data_holder_last_name'])) ? '<span class="metabio-field-header">' . $contact['data_holder_first_name'] . " " . $contact['data_holder_last_name'] . '</span>': null,
    'institution' => (!empty($contact['data_holder_institution'])) ? $contact['data_holder_institution'] : null,
    'address' => (!empty($contact['data_holder_address'])) ? $contact['data_holder_address'] : null,
    'email' => (!empty($contact['data_holder_email'])) ? '<a href="mailto:' . $contact['data_holder_email'] . '">' . $contact['data_holder_email'] . '</a>' : null,
    'phone' => (!empty($contact['data_holder_phone'])) ? $contact['data_holder_phone'] : null
    );
  $output .= '<li>' . implode(array_filter($person), '</li><li>') . '</li>';
  $output .= '</ul></div>';
  return $output;
}

function theme_metabio_checkbox_values($content) {
  $selections = (is_array($content['selections'])) ? $content['selections'] : array((int)$content['selections']);
  return implode(", ", array_map("_options_{$content['name']}", $selections));
}

function theme_metabio_checkbox_values_with_other($content) {
  $key = array_search('Other', array_map("_options_{$content['name']}", $content['selections']));
  if($key !== false) { unset($content['selections'][$key]); }
  $selections = array(theme_metabio_checkbox_values($content));
  if($key && !empty($content['other'])) {
    $selections[] = $content['other'];
  }
  return implode(", ", $selections);
}

function metabio_user_insert(&$edit, $account, $category) {
  db_insert('metabio_users')->fields(array(
    'uid' => $account->uid,
    'first_name' => $edit['first_name'],
    'last_name' => $edit['last_name'],
    'organization' => $edit['organization'],    
    'phone' => $edit['phone'],
    'contact' => $edit['contact'],
    ))->execute();
  drupal_set_message('You are now registered and connected!','status');
}

function metabio_user_update(&$edit, $account, $category) {
  db_update('metabio_users')->fields(array(
    'uid' => $account->uid,
    'first_name' => $edit['first_name'],
    'last_name' => $edit['last_name'],
    'organization' => $edit['organization'],    
    'phone' => $edit['phone'],
    'contact' => $edit['contact'],
    ))->condition('uid', $account->uid,'=')->execute();
  drupal_set_message('Profile updated!','status');
}

function metabio_user_registration_validate($form, &$form_state){
}

function metabio_user_load($users) {
  $result = db_query('SELECT * FROM metabio_users WHERE uid IN (:uids)', array(':uids' => array_keys($users)));
  foreach ($result as $record) {
    $users[$record->uid]->first_name = $record->first_name;
    $users[$record->uid]->last_name = $record->last_name;
    $users[$record->uid]->organization = $record->organization;
    $users[$record->uid]->phone = $record->phone;
    $users[$record->uid]->contact = $record->contact;
  }
}



function _options_taxonomic_information($key = NULL) {
  $options = array(
    1 => t('Mammals'),
    2 => t('Marine mammals'),
    3 => t('Birds'),
    4 => t('Amphibians and reptiles'),
    5 => t('Fish'),
    6 => t('Insects'),
    7 => t('Arthropods'),
    8 => t('Crustaceans'),
    9 => t('Non-arthropod invertebrate animals'),
    10 => t('Vascular plants'),
    11 => t('Non-vascular plants'),
    12 => t('Mushrooms, molds and yeast'),
    13 => t('Unicellular organisms'),
    14 => t('Bacteria')
    );
  return ($key) ? $options[$key] : $options;
}

function _options_sampling_approaches($key = NULL) {
  $options = array(
    1 => t('Direct visual observation (e.g. fieldwork)'),
    2 => t('Indirect visual observation (e.g. photos)'),
    3 => t('Active sampling (e.g. electrofishing, plant vouchers)'),
    4 => t('Passive sampling (e.g. insect or mammal traps)'),
    5 => t('Remote sensing'),
    6 => t('Other')
    );
  return ($key) ? $options[$key] : $options;
}

function _options_study_goals($key = NULL) {
  $options = array(
    1 => t('Individual level (e.g. behaviour, physiology, autecology)'),
    2 => t('Community level (e.g. richness, distribution, composition)'),
    3 => t('Population/species level (e.g. systematic study)'),
    4 => t('Ecosystem level'),
    5 => t('Paleo-study'),
    6 => t('Complete inventory'),
    7 => t('Partial inventory'),
    8 => t('Single species'),
    9 => t('Other'),
    );
  return ($key) ? $options[$key] : $options;
}

function _options_data_types($key = NULL) {
  $options = array(
    1 => t('Species list'), 
    2 => t('Presence/absence'),
    3 => t('Abundance/relative abundance/frequency'),
    4 => t('Biomass'),
    5 => t('Size'),
    6 => t('Relative coverage'),
    7 => t('Genetics'),
    8 => t('Other')
    );
  return ($key) ? $options[$key] : $options;
}

function _options_site_environment($key = NULL) {
  $options = array(
    1 => t('Aquatic'), 
    2 => t('Terrestrial'),
    3 => t('Marine'),
    4 => t('Aerial')
    );
  return ($key) ? $options[$key] : $options;
}

function _options_publication_types($key = NULL) {
  $options = array(
    1 => t('Publication(s) in peer reviewed literature'), 
    2 => t('Thesis/es'),
    3 => t('Report(s)'),
    4 => t('Unpublished'),
    5 => t('Database')
    );
  return ($key) ? $options[$key] : $options;
}

function _options_specimens($key = NULL) {
  $options = array(
    1 => t('Specimens in a known collection'),
    2 => t('Specimens not in a known collection'),
    3 => t('No specimens collected')
    );
  return ($key) ? $options[$key] : $options;
}

function _options_study_status($key = NULL) {
  $options = array(
    1 => t('Ongoing'),
    2 => t('Complete')
    );
  return ($key) ? $options[$key] : $options;
}


function _people_roles($key= NULL){
    $options = array(
    1 => t('Data collector'),
    2 => t('Data holder contact')
    );
  return ($key) ? $options[$key] : $options;
}

// Form validation handler.
function metabio_form_validate($form, &$form_state) {
  //do validation here if necessary
}


// Form submit handler.
function metabio_form_submit($form, &$form_state) {
  $form_state['values']['title'] = $form_state['values']['dataset_name'];
  $fids = array();
  foreach ($form_state['values'] as $key => $value) {
    if (strpos($key, "file_") !== false && $value !== 0) {
      $fids[] = $value;
    }
  }
  if(empty($fids) == false){
    $form_state['values']['files'] = implode(';', $fids);
  }
}


function metabio_insert($node) {
  if($node->type=='metabio'){
    $pout=_metabio_insert_people($node);
    $node=$pout['node'];
    foreach ($node as $key => $value) {
      if (strpos($key,"file_") !== false && $value !== 0) {
        $file = file_load($value);
        $file->status = FILE_STATUS_PERMANENT;
        file_save($file);
        file_usage_add($file, 'metabio', 'node', $node->nid);
      }else if($key=="tags" && $value !== 0){
        $vid = db_select('taxonomy_vocabulary', 't')
        -> fields('t', array('vid'))
        -> condition('name','metabio_keywords','=')
        -> execute()
        -> fetchField();
        $values=explode('|',$value); 
        foreach($values as $val){
          $term = new stdClass();
          $term->name = $val;
          $term->vid = $vid;
          taxonomy_term_save($term);
        }
      }
    }
    $created=date(DATE_ATOM); // Date the entry was created
    $node->date_created=$created;
    $node->date_last_changed=$created;
    $mid=db_insert('metabio_dataset')->fields(array_merge(array('nid' => $node->nid), _metabio_fields($node)))->execute();
    _metabio_insert_people_datasets($mid,$pout['person_role']);
  }
}

function _metabio_insert_people($node) {
  //Assumes that field names match exactly db column names
  $out=_metabio_people_remap($node,'data_collector');
  $arr=array();
  foreach($out['people'] as $key=>$value){
    if (array_filter($value)) {
      $pid=db_insert('metabio_people')->fields($value)->execute();
      $arr[$pid]=1; //person_id=>role
    }
  }
  $out=_metabio_people_remap($out['node'],'data_holder_contact');
  foreach($out['people'] as $key=>$value){
    if (array_filter($value)) {
      $pid=db_insert('metabio_people')->fields($value)->execute();
      $arr[$pid]=2; //person_id=>role
    }
  }
  return array('node'=>$node,'person_role'=>$arr);
}

function _metabio_people_remap($node,$name){
  $n=array_keys((array) $node);
  $dc=preg_grep('/^'.$name.'_/',$n);
  $people=array();
  foreach($dc as $key) {
    preg_match ( '/'.$name.'_([0-9]+)/', $key, $match);
    if(array_search($match[1],array_keys($people))===false){
      $people[$match[1]]=array();
    }
    $field=substr($key,strlen($name)+3);
    $people[$match[1]]+=array($field=>$node->{$key});
    unset($node->{$key});
  }
  return array('node'=>$node,'people'=>$people);
}

function _metabio_insert_people_datasets($mid,$pr){
  foreach($pr as $pid=>$role){
    db_insert('metabio_people_datasets')->fields(array('person_id'=>$pid,'mid'=>$mid,'role'=>$role))->execute();
  }
}


function metabio_update($node) {
  if($node->type=='metabio'){
    $node->date_last_changed=date(DATE_ATOM);
    db_update('metabio_dataset')->fields(_metabio_fields($node))->condition('nid', $node->nid)->execute();
    $query=db_select('metabio_dataset','m');
    $query->join('metabio_people_datasets','md','m.mid=md.mid');
    $result=$query->fields('md',array('person_id','mid'))->condition('m.nid', $node->nid)->execute();
    foreach($result as $r) {
      db_delete('metabio_people')->condition('person_id',$r->person_id,'=')->execute(); //Delete of lookup is automatic with foreign key
    }
    $pout=_metabio_insert_people($node);
    _metabio_insert_people_datasets($r->mid,$pout['person_role']);
  }
}

function metabio_delete($node) {
  if($node->type=='metabio'){
    db_delete('metabio_dataset')->condition('nid', $node->nid)->execute();
  }
}

function metabio_load($nodes) {
  if($nodes[key($nodes)]->type=='metabio'){
    $result = db_select('metabio_dataset', 'm')->fields('m')->condition('m.nid', key($nodes))->execute();
    foreach($result as $record) {
      foreach($GLOBALS['metabio_dataset_fields'] as $group => $fields) {
        foreach($fields as $field) {
          if ($field !== "geography" && $field !== "taxonomic_details" && is_array(json_decode($record->{$field},true))) { 
            $nodes[$record->nid]->metabio[$group][$field] = array_keys(json_decode($record->{$field},true));
          } else {
            $nodes[$record->nid]->metabio[$group][$field] = $record->{$field};
          }
        }
      }
    }
    $query = db_select('metabio_people_datasets','pd');
    $query->join('metabio_people','p','pd.person_id=p.person_id');
    $query->fields('p')->fields('pd',array('role'));
    $query->condition('pd.mid',$record->mid,'=')->orderBy('pd.role');
    $resultp=$query->execute();
    $holder=0;
    $collector=0;
    foreach($resultp as $person) {
      foreach($GLOBALS['metabio_people_fields'] as $field) {
        if ($person->role==1) {
          $nodes[$record->nid]->metabio['overview']['data_collector_'.$collector][$field]=$person->{$field};
        }else if ($person->role==2) {
          $nodes[$record->nid]->metabio['overview']['data_holder_contact_'.$holder][$field]=$person->{$field};;
        }
      }
      if ($person->role==1) {
        $collector+=1;
      }else if ($person->role==2) {                  
        $holder+=1;
      }
    }
  }
}

function _metabio_fields($node) {
  $db_fields = array();
  foreach($GLOBALS['metabio_dataset_fields'] as $group => $fields) {
    foreach($fields as $field) {
      if(isset($node->{$field})) {
        if(is_array($node->{$field})){
          $tmp = array_filter($node->{$field});
          $db_fields[$field] = (empty($tmp)) ? '' : json_encode($tmp);
        } else {
          $db_fields[$field] = $node->{$field};
        }
      }
    }
  }
  return $db_fields;
}

function metabio_taxo_autocomplete_callback($string = "") {
  $matches = array();
  if ($string) {
    $result = db_select('ITIS_names')
    ->fields('ITIS_names',array('tsn','latin_name','english_name','french_name'))
    ->condition(db_or()
      ->condition('latin_name', db_like($string) . '%', 'LIKE')
      ->condition('english_name', db_like($string) . '%', 'LIKE')
      ->condition('french_name', db_like($string) . '%', 'LIKE'))
    ->range(0, 10)
    ->execute();
    foreach ($result as $row) {
      $eng = ($row->english_name === 'NULL') ? '' : ' - '.check_plain($row->english_name);
      $fr = ($row->french_name === 'NULL') ? '' : ' - '.check_plain($row->french_name);
      $matches[$row->latin_name] = check_plain($row->latin_name).$eng.$fr;
    }
  }
  drupal_json_output($matches);
}


function metabio_taxo_checkitis_callback() {
  $string=$_POST['string'];
  if ($string) {
    $result = db_select('ITIS_names')
    ->fields('ITIS_names',array('tsn','latin_name','english_name','french_name'))
    ->condition('latin_name', $string, 'LIKE')
    ->execute()->fetchAll();
  }
  if($result){
    return drupal_json_output($result);
  }else{
    $result= (object) array('unknown_name'=>$string);
    return drupal_json_output([$result]);
  }
}

function metabio_coordinate_conversion_callback($string = "") {
  $converted_coordinates = array();
  $input = ($string) ? $string : _remove_empty_lines($_POST['coordinates']);
  $coordinates = explode("\n", $input);
  foreach($coordinates as $coordinate) {
    if(!array_key_exists($coordinate, $converted_coordinates)) {
      $converted = _make_coordinates($coordinate);
      $status = (_check_coordinate($converted)) ? 'success' : 'fail';
      $converted_coordinates[$coordinate] = array(
        'status' => $status,
        'converted' => $converted
        );
    }
  }
  drupal_json_output($converted_coordinates);
}

function login_callback(){
  $form = drupal_get_form('user_register_form');
  return drupal_render($form);
}

function _remove_empty_lines($string) {
  return preg_replace("/(^[\r\n]*|[\r\n]+)[\s\t]*[\r\n]+/", "\n", $string);
}

function _make_coordinates($point) {
  $loc = preg_replace('/\t/', '|', $point); //replace tabs with pipes
  $loc = preg_replace('/[\p{Z}\s]/u', ' ', $loc); //remove all extra spaces
  $loc = trim(preg_replace('/[^\|\d\s,;.\-NSEWO°ºdms\'"]/i', '', $loc));
  if(preg_match('/[NSEWO]/', $loc) != 0) {
    $coord = preg_split("/[\|,;]/", $loc); //split the coords by a pipe, comma, semicolon
    if (!array_key_exists(1, $coord)) { return array(null, null); }
    $coord = (preg_match('/[EWO]/', $coord[1]) != 0) ? $coord : array_reverse($coord);
    return array(_dms_to_deg(trim($coord[0])),_dms_to_deg(trim($coord[1])));
  } else {
    return preg_split("/[\|\s,;]+/",$loc); //split the coords by a pipe, space, comma, semicolon
  }
}


function _dms_to_deg($dms) {
  $dms = stripslashes($dms);
  $neg = (preg_match('/[SWO]/i', $dms) == 0) ? 1 : -1;
  $dms = preg_replace('/(^\s?-)|(\s?[NSEWO]\s?)/i','', $dms);
  $pattern = "/(\\d*\\.?\\d+)(?:[°ºd: ]+)(\\d*\\.?\\d+)*(?:['m′: ])*(\\d*\\.?\\d+)*[\"s″ ]?/i";
  $parts = preg_split($pattern, $dms, 0, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE);
  if (!$parts) { return; }
  // parts: 0 = degree, 1 = minutes, 2 = seconds
  $d = isset($parts[0]) ? (float)$parts[0] : 0;
  $m = isset($parts[1]) ? (float)$parts[1] : 0;
  if(strpos($dms, ".") > 1 && isset($parts[2])) {
    $m = (float)($parts[1] . '.' . $parts[2]);
    unset($parts[2]);
  }
  $s = isset($parts[2]) ? (float)$parts[2] : 0;
  $dec = ($d + ($m/60) + ($s/3600))*$neg; 
  return $dec;
}

function _check_coordinate($coord) {
  $output = false;
  if(is_numeric($coord[0])
    && is_numeric($coord[1])
    && $coord[0] <= 90 
    && $coord[0] >= -90 
    && $coord[1] <= 180 
    && $coord[1] >= -180) { $output = true; }
    return $output;
}

function ajax_addfiles_callback($form, $form_state) {
  return $form['filesfield']['filelist'];
}

//autocomplete callback function
function metabio_tags_autocomplete_callback($str = 0) {
  $matches = array();
  //vocabulary id
  $vid = db_select('taxonomy_vocabulary', 't')
  -> fields('t', array('vid'))
  -> condition('name','metabio_keywords','=')
  -> execute()
  -> fetchField();

  $result = db_select('taxonomy_term_data', 't')
  -> fields('t', array('tid', 'name'))
  -> condition('vid', $vid, '=')
  -> condition('name', $str.'%%', 'LIKE')
  -> range(0, 10)
  -> execute();
  foreach ($result as $term) {
    $matches[$term->name] = check_plain($term->name);
  }
  drupal_json_output($matches);
}


function metabio_newmeta(){
  module_load_include('inc', 'node', 'node.pages');
  $form = node_add('metabio'); 
  return drupal_render($form);
}

function metabio_metalist(){
  $block = module_invoke('metabio', 'block_view', 'metabio_datasets');
  return $block;
}


/**
 * Implements hook_block_info().
 */
function metabio_block_info() {
  $blocks = array();
  $blocks['metabio_datasets'] = array(
    'info' => t('A block to show metabio datasets'),
    'cache' => DRUPAL_NO_CACHE,
    'region' => 'content',
    'status' => TRUE,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'metabio_list'
    );
  return $blocks;
}

function _ajax_metabio_list($form,&$form_state){
  $filter=$form_state['values']['searchbox'];
  $form['box']['#markup']=metabio_list($filter,true);
  return $form['box'];
}

//function _ajax_metabio_list($form, $form_state){
function metabio_list($filter,$map){

  $header = array(
    array('data'=>t('Dataset name'),'field' => 'dataset_name'), 
    array('data'=>t('Last modified'),'field' => 'changed', 'sort' => 'desc'),
    );
  $query=db_select('metabio_dataset', 't')->extend('PagerDefault');
  $query->join('node','n','t.nid=n.nid');
  if($filter!=""){
    $or = db_or();
    $or->condition('dataset_name','%' . db_like($filter) . '%', 'LIKE');
    $or->condition('dataset_description','%' . db_like($filter) . '%', 'LIKE');
    $or->condition('taxa_studied','%' . db_like($filter) . '%', 'LIKE');
    $or->condition('taxonomic_details','%' . db_like($filter) . '%', 'LIKE');
    $query->condition($or);
  }
  $query->fields('t', array('nid','dataset_name','dataset_description','geography'));
  $query->fields('n', array('changed'));
  $query->extend('TableSort')->orderByHeader($header);
  if ($filter==""){
    $query->limit(100);
  }
  $result = $query->execute();
  $num_results= $result->rowCount();
  $rows = array();
  $output="";
  $geog=array();
  foreach ($result as $node) {
    $isnode = node_load($node->nid);
    $options = array('absolute' => TRUE);
    $url = url('node/' . $node->nid, $options);
    if(node_access('update',$node->nid)){
      $edit='<a href='.$url.'/edit>'.t('Edit').'</a>';
    }else{
      $edit='';
    }
    $rows[] = array('<a href='.$url.'>'.$node->dataset_name.'</a>',gmdate("Y-m-d",$node->changed),$edit);
    if($map){
      $iw="<div><h3><b><a href='/metabio/node/".$node->nid."'>".$node->dataset_name."</a></b></h3></div>";
      $geo=json_decode($node->geography);
      if($geo!==null){
        for($i=0;$i<count($geo->features);$i++){
          $geo->features[$i]->properties=array(
            'nid'=>$node->nid,
            'infowin'=>str_replace("'",'"',htmlentities($iw)),
            );
          $geog[]=$geo->features[$i];
        }
      }
    }
  }
  if ($map){
      $arr=array(
        'type'=>'FeatureCollection',
        'features' => $geog,
        );
      //debug(json_encode($arr,JSON_UNESCAPED_SLASHES));
      $output.="<div id='number_results'>".$num_results." ".t("datasets found")."</div>";
      $output.="<input type='hidden' name='geography' value='".json_encode($arr)."'>";
      $output.='<div id="map" style="width:100%;height:500px;max-width: none;max-height:85%;"></div><br><br>';
  }
  if ($filter==""){
        $output.=theme('pager').theme('table', array('header' => $header, 'rows' => $rows)).theme('pager');
  }else{
        $output.=theme('table', array('header' => $header, 'rows' => $rows));
  }
return $output;
}



//function _ajax_metabio_list($form, $form_state){
function metabio_frontpage_map(){
  drupal_add_js('http://maps.google.com/maps/api/js?sensor=false');
  drupal_add_js(base_path().drupal_get_path('module', 'metabio') . '/javascript/metabio.map.js');
  drupal_add_js(array('metabio_globalmap' => 'yes'), 'setting');
  $query=db_select('metabio_dataset', 't');
  $query->join('node','n','t.nid=n.nid');
  $query->fields('t', array('nid','dataset_name','dataset_description','geography'));
  $query->fields('n', array('changed'));
  $result = $query->execute();
  $num_results= $result->rowCount();
  $rows = array();
  $output="";
  $geog=array();
  foreach ($result as $node) {
    $isnode = node_load($node->nid);
    $options = array('absolute' => TRUE);
    $url = url('node/' . $node->nid, $options);
    if(node_access('update',$node->nid)){
      $edit='<a href='.$url.'/edit>'.t('Edit').'</a>';
    }else{
      $edit='';
    }
    $rows[] = array('<a href='.$url.'>'.$node->dataset_name.'</a>',gmdate("Y-m-d",$node->changed),$edit);
      $iw="<div><h3><b><a href='/metabio/node/".$node->nid."'>".$node->dataset_name."</a></b></h3></div>";
      $geo=json_decode($node->geography);
      if($geo!==null){
        for($i=0;$i<count($geo->features);$i++){
          $geo->features[$i]->properties=array(
            'nid'=>$node->nid,
            'infowin'=>str_replace("'",'"',htmlentities($iw)),
            );
          $geog[]=$geo->features[$i];
        }
      }
    }
      $arr=array(
        'type'=>'FeatureCollection',
        'features' => $geog,
        );
      //debug(json_encode($arr,JSON_UNESCAPED_SLASHES));
      $output.="<div id='number_results'>".$num_results." ".t("datasets found")."</div>";
      $output.="<input type='hidden' name='geography' value='".json_encode($arr)."'>";
      $output.='<div id="map" style="width:100%;height:500px;max-width: none;max-height:85%;"></div><br><br>';
return $output;
}


?>