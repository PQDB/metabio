<?php
$GLOBALS['metabio_dataset_fields'] = array(
  'overview' => array(
    'dataset_name',
    'dataset_description',
    'tags',
    'data_collector',
    'data_holder_first_name',
    'data_holder_last_name',
    'data_holder_institution',
    'data_holder_email',
    'data_holder_phone',
    'data_holder_address',
    'other_institutions',
    'funding_sources',
    'dataset_format',
    'responsible_person',
    'additional_comments',
  ),
  'biology' => array(
    'taxa_studied',
    'taxonomic_information', 
    'taxonomic_details'
  ),
  'study_details' => array(
    'study_design',
    'study_status',
    'sampling_approaches',
    'sampling_approaches_other',
    'study_goals',
    'study_goals_other',
    'data_types',
    'data_types_other',
    'frequency_of_sampling',
    'first_year',
    'last_year'
  ),
  'site_details' => array(
    'number_of_sites',
    'site_description',
    'site_habitat',
    'site_environment',
    'location_name',
    'geography'
  ),
  'citations' => array(
    'publications_types',
    'publications',
    'publications_hyperlinks',
    'publications_dois',
    'specimens',
    'collections'
  ),
  'files' => array(
    'files'
  ),
);

/**
 * Implements hook_node_info().
 */
function metabio_node_info() {
  $info = array();

  $info['metabio'] = array(
    'name'        => t('Metabio Dataset'),
    'base'        => 'metabio',
    'module'      => 'metabio',
    'description' => t('Biodiversity metadata entry form for datasets.'),
    'has_body'    => FALSE
  );

  $info['metabio_list'] = array(
    'name'        => t('Metabio dataset list'),
    'base'        => 'article',
    'module'      => 'metabio',
    'description' => t('List of biodiversity metadata'),
    'has_body'    => TRUE
  );
  return $info;
}

function metabio_init() {
  $module_path = base_path().drupal_get_path('module', 'metabio');
  drupal_add_js(array(
    'metabio_path' => $module_path,
    'metabio_callback_base_url' => base_path().'metabio'
    ), 'setting');
}

// Implementation of hook_menu(): used to create a page for the form
function metabio_menu() {
  $items = array();

  $items['metabio/taxonomy_autocomplete'] = array(
    'page callback' => 'metabio_taxo_autocomplete_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    );

  $items['metabio/coordinate_conversion'] = array(
    'page callback' => 'metabio_coordinate_conversion_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    );

  $items['metabio/tags_autocomplete'] = array(
    'page callback' => 'metabio_tags_autocomplete_callback',
    'access arguments' => array('access content'),
    //'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  ); 

  $items['metabio_list'] = array(
    'title'           => t('List of metadata entries'),
    'description'     => t('List of metadata entries'),
    'menu_name'       => 'main-menu',
    'access arguments' => array('access content'),
    'weight'          => 7,
    'access callback' => 'user_access',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'metabio_metalist',
  );

  $items['newmeta'] = array(
    'title'           => t('Add a new metadata entry'),
    'description'     => t('Metadata entry form'),
    'menu_name'       => 'main-menu',
    'access arguments' => array('create metabio content'),
    'weight'          => 8,
    'access callback' => 'user_access',
    'page callback' => 'metabio_newmeta',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_node_view().
 */
function metabio_node_view($node, $view_mode = 'full', $langcode = NULL) {
  if($node->type == 'metabio') {
    if($view_mode == 'full') {
      $node->content['metabio'] = array(
        '#theme' => 'metabio',
        '#metabio' => $node->metabio
        );
    }
    if($view_mode == 'eml') {
      //placeholder for eml view
    }
  }
}

/**
 * Implements hook_theme().
 */
function metabio_theme($existing, $type, $theme, $path) {

  $info['metabio'] = array(
    'template' => 'metabio',
    'render element' => 'elements',
    'path' => $path . '/templates'
    );

  foreach(array_keys($GLOBALS['metabio_dataset_fields']) as $field) {
    $info['metabio_' . $field] = array(
      'template' => 'metabio_' . $field,
      'render element' => 'elements',
      'path' => $path . '/templates'
    );
  }

  $info['metabio_contact'] = array(
    'render element' => 'element'
  );

  $info['metabio_geography'] = array(
    'render element' => 'element'
  );
  
  $info['metabio_checkbox_values'] = array(
    'render element' => 'element'
  );

  $info['metabio_checkbox_values_with_other'] = array(
    'render element' => 'element'
  );
  
  return $info;
}

function template_preprocess_metabio(&$variables) {
  $data = $variables['elements']['#metabio'];
  foreach ($data as $section => $fields) {
    foreach($fields as $key => $value) {
      if($key === 'geography') {
        $value = $data[$section][$key];
      } else {
        $value = (is_string($data[$section][$key])) ? check_plain($data[$section][$key]) : $data[$section][$key];
      }
      $variables['content'][$section][$key] = $value;
    }
  }
}

function theme_metabio_geography($content) {
  drupal_add_js('http://maps.google.com/maps/api/js?sensor=false');
  drupal_add_js(base_path().drupal_get_path('module', 'metabio') . '/javascript/metabio.map.js');
  drupal_add_js(array('metabio_mode' => 'view'), 'setting');
  $output  = '<div id="map" width="700" height="500"></div>';
  $output .= '<input name="geography" value="' . htmlentities($content['content']) . '" style="display:none;"></input>';
  return $output;
}

function theme_metabio_contact($contact) {
  $output  = '<div class="metabio-contact metabox"><ul>';
  $person = array(
    'name' => (!empty($contact['data_holder_first_name']) && !empty($contact['data_holder_last_name'])) ? '<span class="metabio-field-header">' . $contact['data_holder_first_name'] . " " . $contact['data_holder_last_name'] . '</span>': null,
    'institution' => (!empty($contact['data_holder_institution'])) ? $contact['data_holder_institution'] : null,
    'address' => (!empty($contact['data_holder_address'])) ? $contact['data_holder_address'] : null,
    'email' => (!empty($contact['data_holder_email'])) ? '<a href="mailto:' . $contact['data_holder_email'] . '">' . $contact['data_holder_email'] . '</a>' : null,
    'phone' => (!empty($contact['data_holder_phone'])) ? $contact['data_holder_phone'] : null
  );
  $output .= '<li>' . implode(array_filter($person), '</li><li>') . '</li>';
  $output .= '</ul></div>';
  return $output;
}

function theme_metabio_checkbox_values($content) {
  $selections = (is_array($content['selections'])) ? $content['selections'] : array((int)$content['selections']);
  return implode(", ", array_map("_options_{$content['name']}", $selections));
}

function theme_metabio_checkbox_values_with_other($content) {
  $key = array_search('Other', array_map("_options_{$content['name']}", $content['selections']));
  if($key !== false) { unset($content['selections'][$key]); }
  $selections = array(theme_metabio_checkbox_values($content));
  if($key && !empty($content['other'])) {
    $selections[] = $content['other'];
  }
  return implode(", ", $selections);
}

function metabio_form_alter(&$form, &$form_state, $form_id) {

  if($form_id == 'metabio_node_form') {

    drupal_add_js(array('metabio_mode' => 'edit'), 'setting');
    $form['vertical_tabs'] = array(
    '#type' => 'vertical_tabs',
    '#default_tab' => 'overview_tab',
   );
    $form['overview'] = array(
      '#title' => t('Overview'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#group' => 'vertical_tabs',
      '#tree' =>FALSE,
      );

    $form['overview']['dataset_name'] = array(
      '#title' => t('Dataset name'),
      '#type' => 'textfield',
      '#size' => 50,
      '#required' => TRUE,
      '#default_value' => isset($form['#node']->metabio['overview']['dataset_name']) ? $form['#node']->metabio['overview']['dataset_name'] : ""
      );

    $form['overview']['dataset_description'] = array(
      '#title' => t('Dataset description'),
      '#type' => 'textarea',
      '#cols' => 50,
      '#rows' => 6,
      '#required' => TRUE,
      '#default_value' => isset($form['#node']->metabio['overview']['dataset_description']) ? $form['#node']->metabio['overview']['dataset_description'] : ""
      );

    $form['overview']['tags'] = array(
      '#type' => 'hidden',
      '#prefix' => '<div class="metabox"><h3>'.t('Tags / keywords').'</h3>',
      '#default_value' => isset($form['#node']->metabio['overview']['tags']) ? $form['#node']->metabio['overview']['tags'] : "",
      );

    $form['overview']['tags_input'] = array(
      '#type' => 'textfield',
      '#title' => '',
      '#prefix' => "<h4>".t('Add tags/keywords here. Start typing and choose an existing tag, or enter a new one, then press the ENTER key.')."</h4><table id='tagstbl'></table>",
      '#autocomplete_path' => 'metabio/tags_autocomplete',
      '#maxlength' => 1024,
      '#suffix' => '</div><br>'
    );

    $form['overview']['data_collector'] = array(
      '#title' => t('Data collector(s)'),
      '#type' => 'textfield',
      '#size' => 50,
      '#required' => FALSE,
      '#default_value' => isset($form['#node']->metabio['overview']['data_collector']) ? $form['#node']->metabio['overview']['data_collector'] : ""
      );
    
    $form['overview']['data_holder_contact'] = array(
      '#title' => t('Contact information for data holder'),
      '#type' => 'fieldset', 
      '#collapsible' => FALSE, 
      );

    $form['overview']['data_holder_contact']['data_holder_first_name'] = array(
      '#title' => t('First name'),
      '#type' => 'textfield',
      '#size' => 50,
      '#required' => TRUE,
      '#default_value' => isset($form['#node']->metabio['overview']['data_holder_first_name']) ? $form['#node']->metabio['overview']['data_holder_first_name'] : ""
      );

    $form['overview']['data_holder_contact']['data_holder_last_name'] = array(
      '#title' => t('Last name'),
      '#type' => 'textfield',
      '#size' => 50,
      '#required' => TRUE,
      '#default_value' => isset($form['#node']->metabio['overview']['data_holder_last_name']) ? $form['#node']->metabio['overview']['data_holder_last_name'] : ""
      );

    $form['overview']['data_holder_contact']['data_holder_institution'] = array(
      '#title' => t('Institution'),
      '#type' => 'textfield',
      '#size' => 50,
      '#required' => FALSE,
      '#default_value' => isset($form['#node']->metabio['overview']['data_holder_institution']) ? $form['#node']->metabio['overview']['data_holder_institution'] : ""
      );

    $form['overview']['data_holder_contact']['data_holder_email'] = array(
      '#title' => t('Email'),
      '#type' => 'textfield',
      '#size' => 50,
      '#required' => TRUE,
      '#default_value' => isset($form['#node']->metabio['overview']['data_holder_email']) ? $form['#node']->metabio['overview']['data_holder_email'] : ""
      );

    $form['overview']['data_holder_contact']['data_holder_phone'] = array(
      '#title' => t('Telephone'),
      '#type' => 'textfield',
      '#size' => 50,
      '#required' => FALSE,
      '#default_value' => isset($form['#node']->metabio['overview']['data_holder_phone']) ? $form['#node']->metabio['overview']['data_holder_phone'] : ""
      );

    $form['overview']['data_holder_contact']['data_holder_address'] = array(
      '#title' => t('Address'),
      '#type' => 'textarea',
      '#cols' => 50,
      '#rows' => 3,
      '#size' => 50,
      '#required' => FALSE,
      '#default_value' => isset($form['#node']->metabio['overview']['data_holder_address']) ? $form['#node']->metabio['overview']['data_holder_address'] : ""
      );

    $form['overview']['other_institutions'] = array(
      '#title' => t('Other institution(s) involved in data collection, analysis, archiving, etc. (e.g. university, government, department)'),
      '#type' => 'textarea',
      '#cols' => 50,
      '#rows' => 6,
      '#required' => FALSE,
      '#default_value' => isset($form['#node']->metabio['overview']['other_institutions']) ? $form['#node']->metabio['overview']['other_institutions'] : ""
      );

    $form['overview']['funding_sources'] = array(
      '#title' => t('Funding sources for data collection'),
      '#type' => 'textarea',
      '#cols' => 50,
      '#rows' => 6,
      '#required' => FALSE,
      '#default_value' => isset($form['#node']->metabio['overview']['funding_sources']) ? $form['#node']->metabio['overview']['funding_sources'] : ""
      );

    $form['overview']['dataset_format'] = array(
      '#title' => t('In what format is the dataset?'),
      '#type' => 'textarea',
      '#cols' => 50,
      '#rows' => 6,
      '#required' => FALSE,
      '#default_value' => isset($form['#node']->metabio['overview']['dataset_format']) ? $form['#node']->metabio['overview']['dataset_format'] : ""
      );

    $form['overview']['responsible_person'] = array(
      '#title' => t('Person currently responsible for this metadata'),
      '#type' => 'textfield',
      '#size' => 50,
      '#required' => FALSE,
      '#default_value' => isset($form['#node']->metabio['overview']['responsible_person']) ? $form['#node']->metabio['overview']['responsible_person'] : ""
      );

    $form['overview']['additional_comments'] = array(
      '#title' => t('Additional comments'),
      '#type' => 'textarea',
      '#cols' => 50,
      '#rows' => 6,
      '#required' => FALSE,
      '#default_value' => isset($form['#node']->metabio['overview']['additional_comments']) ? $form['#node']->metabio['overview']['additional_comments'] : ""
      );

    $form['biology'] = array(
      '#title' => t('Biology'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'vertical_tabs',
      '#tree' => FALSE
      );

    $form['biology']['taxa_studied'] = array(
      '#title' => t('Taxa studied'),
      '#type' => 'textfield',
      '#size' => 100,
      '#required' => FALSE,
      '#default_value' => isset($form['#node']->metabio['biology']['taxa_studied']) ? $form['#node']->metabio['biology']['taxa_studied'] : ""
      );

    $form['biology']['taxonomic_information'] = array(
      '#title' => t('Taxonomic information'),
      '#type' => 'checkboxes',
      '#options' => _options_taxonomic_information(),
      '#default_value' => isset($form['#node']->metabio['biology']['taxonomic_information']) && is_array($form['#node']->metabio['biology']['taxonomic_information']) ? $form['#node']->metabio['biology']['taxonomic_information'] : array()
      );

    $form['biology']['taxonomic_details'] = array(
      '#type' => 'hidden',
      '#prefix' => '<div class="metabox"><h3>'.t('Taxonomic Details').'</h3>',
      '#default_value' => isset($form['#node']->metabio['biology']['taxonomic_details']) ? $form['#node']->metabio['biology']['taxonomic_details'] : "",
      );


    $form['biology']['taxonomic_details_input'] = array(
      '#type' => 'textfield',
      '#size' => 100,
      '#required' => FALSE,
      '#prefix' => "<h4>".t('Add taxa here by typing either the scientific or common name. Press the ENTER key when the name is selected')."</h4><table id='taxotbl'></table>",
      '#suffix' => "</div>",
      '#autocomplete_path' => (db_table_exists('itis_names')) ? 'metabio/taxonomy_autocomplete' : '',
      );  

    $form['study_details'] = array(
      '#title' => t('Study details'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'vertical_tabs',
      '#tree' =>FALSE,
      );

    $form['study_details']['study_design'] = array(
      '#title' => t('Describe the study design'),
      '#type' => 'textarea',
      '#cols' => 50,
      '#rows' => 6,
      '#required' => FALSE,
      '#default_value' => isset($form['#node']->metabio['study_details']['study_design']) ? $form['#node']->metabio['study_details']['study_design'] : ""
      );

    $form['study_details']['study_status'] = array(
      '#title' => t('Study status'),
      '#type' => 'radios',
      '#options' => _options_study_status(),
      '#default_value' => isset($form['#node']->metabio['study_details']['study_status']) ? $form['#node']->metabio['study_details']['study_status'] : ""
      );

    $form['study_details']['sampling_approaches'] = array(
      '#title' => t('Sampling approach(es)'),
      '#type' => 'checkboxes',
      '#options' => _options_sampling_approaches(),
      '#default_value' => isset($form['#node']->metabio['study_details']['sampling_approaches']) && is_array($form['#node']->metabio['study_details']['sampling_approaches']) ? $form['#node']->metabio['study_details']['sampling_approaches'] : array()
      );

    $form['study_details']['sampling_approaches_other'] = array(
      '#type' => 'textfield',
      '#size' => 70,
      '#title' => '<h4>'.t('Please define "other"').'</h4>',
      '#states' => array(
        'visible' => array(
          ':input[name="sampling_approaches[6]"]' => array('checked' => TRUE),
        ),
      ),
      '#default_value' => (isset($form['#node']->metabio['study_details']['sampling_approaches_other']) && in_array(6, $form['#node']->metabio['study_details']['sampling_approaches'])) ? $form['#node']->metabio['study_details']['sampling_approaches_other'] : ""
    );

    $form['study_details']['study_goals'] = array(
      '#title' => t('Study goal(s)'),
      '#type' => 'checkboxes',
      '#options' => _options_study_goals(),
      '#default_value' => isset($form['#node']->metabio['study_details']['study_goals']) && is_array($form['#node']->metabio['study_details']['study_goals']) ? $form['#node']->metabio['study_details']['study_goals'] : array()
      );

    $form['study_details']['study_goals_other'] = array(
      '#type' => 'textfield',
      '#size' => 70,
      '#title' => '<h4>'.t('Please define "other"').'</h4>',
      '#states' => array(
        'visible' => array(
          ':input[name="study_goals[9]"]' => array('checked' => TRUE),
        ),
      ),
      '#default_value' => isset($form['#node']->metabio['study_details']['study_goals_other']) ? $form['#node']->metabio['study_details']['study_goals_other'] : ""
    );


    $form['study_details']['data_types'] = array(
      '#title' => t('Data type(s)'),
      '#type' => 'checkboxes',
      '#options' => _options_data_types(),
      '#default_value' => isset($form['#node']->metabio['study_details']['data_types']) && is_array($form['#node']->metabio['study_details']['data_types']) ? $form['#node']->metabio['study_details']['data_types'] : array()
      );


    $form['study_details']['data_types_other'] = array(
      '#type' => 'textfield',
      '#size' => 70,
      '#title' => '<h4>'.t('Please define "other"').'</h4>',
      '#states' => array(
        'visible' => array(
          ':input[name="data_types[8]"]' => array('checked' => TRUE),
        ),
      ),
      '#default_value' => isset($form['#node']->metabio['study_details']['data_types_other']) ? $form['#node']->metabio['study_details']['data_types_other'] : ""
    );

    $form['study_details']['frequency_of_sampling'] = array(
      '#title' => t('Frequency of sampling'),
      '#type' => 'textarea',
      '#cols' => 30,
      '#rows' => 2,
      '#required' => FALSE,
      '#default_value' => isset($form['#node']->metabio['study_details']['frequency_of_sampling']) ? $form['#node']->metabio['study_details']['frequency_of_sampling'] : ""
      );

    $form['study_details']['first_year'] = array(
      '#title' => t('First year of data collection'),
      '#type' => 'date_select',
      '#date_format' => 'Y',
      '#default_value' => '2013',
      '#date_year_range' => '-100:0',
      '#required' => FALSE,
      '#date_label_position' => 'within',
      '#default_value' => isset($form['#node']->metabio['study_details']['first_year']) ? $form['#node']->metabio['study_details']['first_year'] : ""
      );

    $form['study_details']['last_year'] = array(
      '#title' => t('Last year of data collection'),
      '#type' => 'date_select',
      '#date_format' => 'Y',
      '#default_value' => '2013',
      '#date_year_range' => '-100:0',
      '#required' => FALSE,
      '#date_label_position' => 'within',
      '#default_value' => isset($form['#node']->metabio['study_details']['last_year']) ? $form['#node']->metabio['study_details']['last_year'] : ""
      );

    $form['site_details'] = array(
      '#title' => t('Site details'),
      '#type' => 'fieldset',
      '#attributes' => array(
        'class' => array('site_details_fieldset'),
      ),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'vertical_tabs',
      '#tree' =>FALSE
      );

    $form['site_details']['number_of_sites'] = array(
      '#title' => t('Number of sites included in the study'),
      '#type' => 'textfield',
      '#size' => 100,
      '#required' => FALSE,
      '#default_value' => isset($form['#node']->metabio['site_details']['number_of_sites']) ? $form['#node']->metabio['site_details']['number_of_sites'] : ""
      );

    $form['site_details']['site_description'] = array(
      '#title' => t('Describe the site(s) (including distribution of sites if more than one)'),
      '#type' => 'textarea',
      '#cols' => 50,
      '#rows' => 6,
      '#required' => FALSE,
      '#default_value' => isset($form['#node']->metabio['site_details']['site_description']) ? $form['#node']->metabio['site_details']['site_description'] : ""
      );

    $form['site_details']['site_habitat'] = array(
      '#title' => t('Describe site habitat(s)'),
      '#type' => 'textarea',
      '#cols' => 50,
      '#rows' => 6,
      '#required' => FALSE,
      '#default_value' => isset($form['#node']->metabio['site_details']['site_habitat']) ? $form['#node']->metabio['site_details']['site_habitat'] : ""
      );

    $form['site_details']['site_environment'] = array(
      '#title' => t('Site environment(s)'),
      '#type' => 'checkboxes',
      '#options' => _options_site_environment(),
      '#required' => FALSE,
      '#default_value' => isset($form['#node']->metabio['site_details']['site_environment']) && is_array($form['#node']->metabio['site_details']['site_environment']) ? $form['#node']->metabio['site_details']['site_environment'] : array()
      );

    $form['site_details']['location_name'] = array(
      '#title' => t('Location name'),
      '#type' => 'textfield',
      '#size' => 100,
      '#required' => FALSE,
      '#prefix' => '<div class="metabox"><h2>'.t('Geography').'</h2>',
      '#suffix' => '<div id="noloc" style="display:none;">'.t('Location not recognized!').'</div><button type="button" id="addbynamebut">'.t('Add marker at this location').'</button>',
      '#default_value' => isset($form['#node']->metabio['site_details']['location_name']) ? $form['#node']->metabio['site_details']['location_name'] : ""
      );

    $form['site_details']['geography'] = array(
      '#title' => t('Geography'),
      '#type' => 'hidden',
      '#size' => 200,
      '#required' => FALSE,
      '#default_value' => isset($form['#node']->metabio['site_details']['geography']) ? $form['#node']->metabio['site_details']['geography'] : "",
      '#prefix' => '<h3>'.t('Define extent/location of study site(s)').'</h3>
        <p>'.t('Add geographic coordinates of each study site in the box below, one coordinate per line or add the sites directly on the map below.').'
          <textarea id="inputcoords"></textarea>
          <div id="coorderror">'.t('Coordinate(s) not recognized!').'</div>
          <button type="button" id="inputcoordsbut" class="metabio-button">'.t('Add to map').'</button>
        </p>
        <p>'.t('For points, single-click to delete. For polygons, double-click on a node to delete, click and drag to relocate.').'</p>',
      '#suffix' => '<p>
        <button type="button" id="polybut">'.t('Add polygon').'</button>
        <button type="button" id="pointbut">'.t('Add point(s)').'</button>
        <button type="button" id="metabio-clear">'.t('Clear all').'</button>
        </p>
        <div id="map" width="700" height="500"></div></div>'
      );

    $form['citations'] = array(
      '#title' => t('Citations'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'vertical_tabs',
      '#tree' =>FALSE
      );

    $form['citations']['publications_types'] = array(
      '#title' => t('Publications'),
      '#type' => 'checkboxes',
      '#options' => _options_publication_types(),
      '#default_value' => isset($form['#node']->metabio['citations']['publications_types']) && is_array($form['#node']->metabio['citations']['publications_types']) ? $form['#node']->metabio['citations']['publications_types'] : array()
      );

    $form['citations']['publications'] = array(
      '#title' => t('List of publications'),
      '#type' => 'textarea',
      '#cols' => 50,
      '#rows' => 6,
      '#required' => FALSE,
      '#default_value' => isset($form['#node']->metabio['citations']['publications']) ? $form['#node']->metabio['citations']['publications'] : ""
      );

    $form['citations']['publications_hyperlinks'] = array(
      '#title' => t('Hyperlinks to publications'),
      '#type' => 'textarea',
      '#cols' => 50,
      '#rows' => 6,
      '#required' => FALSE,
      '#default_value' => isset($form['#node']->metabio['citations']['publications_hyperlinks']) ? $form['#node']->metabio['citations']['publications_hyperlinks'] : ""
      );

    $form['citations']['publications_dois'] = array(
      '#title' => t('DOIs publications'),
      '#type' => 'textarea',
      '#cols' => 50,
      '#rows' => 6,
      '#required' => FALSE,
      '#default_value' => isset($form['#node']->metabio['citations']['publications_dois']) ? $form['#node']->metabio['citations']['publications_dois'] : ""
      );

    $form['citations']['specimens'] = array(
      '#title' => t('Specimens'),
      '#type' => 'checkboxes',
      '#options' => _options_specimens(),
      '#default_value' => isset($form['#node']->metabio['citations']['specimens']) && is_array($form['#node']->metabio['citations']['specimens']) ? $form['#node']->metabio['citations']['specimens'] : array()
      );

    $form['citations']['collections'] = array(
      '#title' => t('Name of collection(s)'),
      '#type' => 'textarea',
      '#rows' => 6,
      '#cols' => 50,
      '#default_value' => isset($form['#node']->metabio['citations']['collections']) ? $form['#node']->metabio['citations']['collections'] : array()
      );


    $form['filesfield'] = array(
      '#title' => t('Files'),
      '#type' => 'fieldset',
      //'#title_display' => 'invisible',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'vertical_tabs',
      '#tree' =>FALSE
      );

    $form['filesfield']['filelist'] = array(
      '#type' => 'fieldset',
      '#title_display' => 'invisible',
      '#prefix' => '<div id="files-div">',
      '#suffix' => '</div>',
      '#tree' =>FALSE
      );

    $numuploads = 0;
    if(array_key_exists('values',$form_state)){
      foreach ($form_state['values'] as $key => $value) {
        if (strpos($key,"file_") !== false) {
        $numuploads++;
        }
      }
    }

    if (isset($form['#node']->metabio['files']['files']) && $numuploads == 0){
      $filesindb = explode(';',$form['#node']->metabio['files']['files']);
      $numuploads = count($filesindb);
    }

    for ($i=0; $i<=$numuploads; $i++){
      $form['filesfield']['filelist']['file_'.$i]= array(
        '#title' => t('Choose a file'),
        '#type' => 'managed_file',
        '#title_display' => 'invisible',
        '#size' => 22,
        '#default_value' => isset($filesindb[$i]) ? $filesindb[$i] : "",
        '#upload_location' => 'public://metabio_files/',
        '#upload_validators' => array(
          'file_validate_extensions' => array('gif png jpg jpeg pdf xls xlsx doc docx csv csvt odf txt rtf'),
          // Pass the maximum file size in bytes
        ),
      );
    }

    $form['filesfield']['addnewfile'] = array(
      '#type' => 'submit',
      '#value' => t('Add more files'),
      '#executes_submit_callback' => FALSE,
      '#ajax' => array(
        'callback' => 'ajax_addfiles_callback',
        'wrapper' => 'files-div',
        'method' => 'append',
        'effect' => 'fade',
        ),
      );

    $module_path = base_path().drupal_get_path('module', 'metabio');
    $js_files = array(
      'http://maps.google.com/maps/api/js?sensor=false',
      $module_path . '/javascript/metabio.map.js',
      $module_path . '/javascript/metabio.taxonomy.js',
      $module_path . '/javascript/metabio.tags.js',
      );
    $form['#attached']['js'] = $js_files;
    $form['#pre_render'][] = 'vertical_tabs_form_pre_render';
    $form['#validate'][] = 'metabio_form_validate';
    $form['#submit'][] = 'metabio_form_submit';
    $form['additional_settings']['#access'] = FALSE;
    $form['options']['status']['#default_value'] = TRUE;
    $form['options']['status']['#input'] = TRUE;
    $form['options']['status']['#return_value'] = TRUE;
    $form['options']['status']['#value'] = TRUE;
    $form['options']['status']['#checked'] = TRUE;
    // Temporary fix to see datasets on Front page. Until we create a list view. 
    $form['options']['promote']['#checked'] = TRUE;
    $form['options']['promote']['#return_value'] = TRUE;
    $form['options']['promote']['#default_value'] = TRUE;
    $form['options']['promote']['#input'] = TRUE;
    $form['options']['promote']['#value'] = TRUE;
  }
}

function _options_taxonomic_information($key = NULL) {
  $options = array(
    1 => t('Mammals'),
    2 => t('Marine mammals'),
    3 => t('Birds'),
    4 => t('Amphibians and reptiles'),
    5 => t('Fish'),
    6 => t('Insects'),
    7 => t('Arthropods'),
    8 => t('Crustaceans'),
    9 => t('Non-arthropod invertebrate animals'),
    10 => t('Vascular plants'),
    11 => t('Non-vascular plants'),
    12 => t('Mushrooms, molds and yeast'),
    13 => t('Unicellular organisms'),
    14 => t('Bacteria')
  );
  return ($key) ? $options[$key] : $options;
}

function _options_sampling_approaches($key = NULL) {
  $options = array(
    1 => t('Direct visual observation (e.g. fieldwork)'),
    2 => t('Indirect visual observation (e.g. photos)'),
    3 => t('Active sampling (e.g. electrofishing, plant vouchers)'),
    4 => t('Passive sampling (e.g. insect or mammal traps)'),
    5 => t('Remote sensing'),
    6 => t('Other')
  );
  return ($key) ? $options[$key] : $options;
}

function _options_study_goals($key = NULL) {
  $options = array(
    1 => t('Individual level (e.g. behaviour, physiology, autecology)'),
    2 => t('Community level (e.g. richness, distribution, composition)'),
    3 => t('Population/species level (e.g. systematic study)'),
    4 => t('Ecosystem level'),
    5 => t('Paleo-study'),
    6 => t('Complete inventory'),
    7 => t('Partial inventory'),
    8 => t('Single species'),
    9 => t('Other'),
  );
  return ($key) ? $options[$key] : $options;
}

function _options_data_types($key = NULL) {
  $options = array(
    1 => t('Species list'), 
    2 => t('Presence/absence'),
    3 => t('Abundance/relative abundance/frequency'),
    4 => t('Biomass'),
    5 => t('Size'),
    6 => t('Relative coverage'),
    7 => t('Genetics'),
    8 => t('Other')
  );
  return ($key) ? $options[$key] : $options;
}

function _options_site_environment($key = NULL) {
  $options = array(
    1 => t('Aquatic'), 
    2 => t('Terrestrial'),
    3 => t('Marine'),
    4 => t('Aerial')
  );
  return ($key) ? $options[$key] : $options;
}

function _options_publication_types($key = NULL) {
  $options = array(
    1 => t('Publication(s) in peer reviewed literature'), 
    2 => t('Thesis/es'),
    3 => t('Report(s)'),
    4 => t('Unpublished'),
    5 => t('Database')
  );
  return ($key) ? $options[$key] : $options;
}

function _options_specimens($key = NULL) {
  $options = array(
    1 => t('Specimens in a known collection'),
    2 => t('Specimens not in a known collection'),
    3 => t('No specimens collected')
  );
  return ($key) ? $options[$key] : $options;
}

function _options_study_status($key = NULL) {
  $options = array(
    1 => t('Ongoing'),
    2 => t('Complete')
  );
  return ($key) ? $options[$key] : $options;
}

// Form validation handler.
function metabio_form_validate($form, &$form_state) {
  //do validation here if necessary
}


// Form submit handler.
function metabio_form_submit($form, &$form_state) {
  $form_state['values']['title'] = $form_state['values']['dataset_name'];
  $fids = array();
  foreach ($form_state['values'] as $key => $value) {
    if (strpos($key, "file_") !== false && $value !== 0) {
      $fids[] = $value;
    }
  }
  if(empty($fids) == false){
    $form_state['values']['files'] = implode(';', $fids);
  }
}


function metabio_insert($node) {
  if($node->type=='metabio'){
    foreach ($node as $key => $value) {
      if (strpos($key,"file_") !== false && $value !== 0) {
        $file = file_load($value);
        $file->status = FILE_STATUS_PERMANENT;
        file_save($file);
        file_usage_add($file, 'metabio', 'node', $node->nid);
      }else if($key=="tags" && $value !== 0){
        $vid = db_select('taxonomy_vocabulary', 't')
          -> fields('t', array('vid'))
          -> condition('name','metabio_keywords','=')
          -> execute()
          -> fetchField();
        $values=explode('|',$value); 
        foreach($values as $val){
            $term = new stdClass();
            $term->name = $val;
            $term->vid = $vid;
            taxonomy_term_save($term);
        }
      }
    }
    db_insert('metabio_dataset')->fields(array_merge(array('nid' => $node->nid), _metabio_fields($node)))->execute();
  }
}

function metabio_update($node) {
  if($node->type=='metabio'){
    db_update('metabio_dataset')->fields(_metabio_fields($node))->condition('nid', $node->nid)->execute();
  }
}

function metabio_delete($node) {
  if($node->type=='metabio'){
    db_delete('metabio_dataset')->condition('nid', $node->nid)->execute();
  }
}

function metabio_load($nodes) {
  if($nodes[key($nodes)]->type=='metabio'){
    $result = db_select('metabio_dataset', 'm')->fields('m')->condition('m.nid', key($nodes))->execute();
    foreach($result as $record) {
      foreach($GLOBALS['metabio_dataset_fields'] as $group => $fields) {
        foreach($fields as $field) {
          if ($field !== "geography" && is_array(json_decode($record->{$field},true))){ 
            $nodes[$record->nid]->metabio[$group][$field] = array_keys(json_decode($record->{$field},true));
          } else{
            $nodes[$record->nid]->metabio[$group][$field] = $record->{$field};
          }
        }
      }
    }
  }
}

function _metabio_fields($node) {
  $db_fields = array();
  foreach($GLOBALS['metabio_dataset_fields'] as $group => $fields) {
    foreach($fields as $field) {
      if(isset($node->{$field})) {
        if(is_array($node->{$field})){
          $tmp = array_filter($node->{$field});
          $db_fields[$field] = (empty($tmp)) ? '' : json_encode($tmp);
        } else {
          $db_fields[$field] = $node->{$field};
        }
      }
    }
  }
  return $db_fields;
}

function metabio_taxo_autocomplete_callback($string = "") {
  $matches = array();
  if ($string) {
    $result = db_select('ITIS_names')
    ->fields('ITIS_names',array('tsn','latin_name','english_name','french_name'))
    ->condition(db_or()
      ->condition('latin_name', db_like($string) . '%', 'LIKE')
      ->condition('english_name', db_like($string) . '%', 'LIKE')
      ->condition('french_name', db_like($string) . '%', 'LIKE'))
    ->range(0, 10)
    ->execute();
    foreach ($result as $row) {
      $eng = ($row->english_name === 'NULL') ? '' : ' - '.check_plain($row->english_name);
      $fr = ($row->french_name === 'NULL') ? '' : ' - '.check_plain($row->french_name);
      $matches[$row->latin_name] = check_plain($row->latin_name).$eng.$fr;
    }
  }
  drupal_json_output($matches);
}

function metabio_coordinate_conversion_callback($string = "") {
  $converted_coordinates = array();
  $input = ($string) ? $string : _remove_empty_lines($_POST['coordinates']);
  $coordinates = explode("\n", $input);
  foreach($coordinates as $coordinate) {
    if(!array_key_exists($coordinate, $converted_coordinates)) {
      $converted = _make_coordinates($coordinate);
      $status = (_check_coordinate($converted)) ? 'success' : 'fail';
      $converted_coordinates[$coordinate] = array(
        'status' => $status,
        'converted' => $converted
        );
    }
  }
  drupal_json_output($converted_coordinates);
}

function _remove_empty_lines($string) {
  return preg_replace("/(^[\r\n]*|[\r\n]+)[\s\t]*[\r\n]+/", "\n", $string);
}

function _make_coordinates($point) {
  $loc = preg_replace('/\t/', '|', $point); //replace tabs with pipes
  $loc = preg_replace('/[\p{Z}\s]/u', ' ', $loc); //remove all extra spaces
  $loc = trim(preg_replace('/[^\|\d\s,;.\-NSEWO°ºdms\'"]/i', '', $loc));
  if(preg_match('/[NSEWO]/', $loc) != 0) {
    $coord = preg_split("/[\|,;]/", $loc); //split the coords by a pipe, comma, semicolon
    if (!array_key_exists(1, $coord)) { return array(null, null); }
    $coord = (preg_match('/[EWO]/', $coord[1]) != 0) ? $coord : array_reverse($coord);
    return array(_dms_to_deg(trim($coord[0])),_dms_to_deg(trim($coord[1])));
  } else {
    return preg_split("/[\|\s,;]+/",$loc); //split the coords by a pipe, space, comma, semicolon
  }
}


function _dms_to_deg($dms) {
  $dms = stripslashes($dms);
  $neg = (preg_match('/[SWO]/i', $dms) == 0) ? 1 : -1;
  $dms = preg_replace('/(^\s?-)|(\s?[NSEWO]\s?)/i','', $dms);
  $pattern = "/(\\d*\\.?\\d+)(?:[°ºd: ]+)(\\d*\\.?\\d+)*(?:['m′: ])*(\\d*\\.?\\d+)*[\"s″ ]?/i";
  $parts = preg_split($pattern, $dms, 0, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE);
  if (!$parts) { return; }
  // parts: 0 = degree, 1 = minutes, 2 = seconds
  $d = isset($parts[0]) ? (float)$parts[0] : 0;
  $m = isset($parts[1]) ? (float)$parts[1] : 0;
  if(strpos($dms, ".") > 1 && isset($parts[2])) {
    $m = (float)($parts[1] . '.' . $parts[2]);
    unset($parts[2]);
  }
  $s = isset($parts[2]) ? (float)$parts[2] : 0;
  $dec = ($d + ($m/60) + ($s/3600))*$neg; 
  return $dec;
}

function _check_coordinate($coord) {
  $output = false;
  if(is_numeric($coord[0])
    && is_numeric($coord[1])
    && $coord[0] <= 90 
    && $coord[0] >= -90 
    && $coord[1] <= 180 
    && $coord[1] >= -180) { $output = true; }
  return $output;
}

function ajax_addfiles_callback($form, $form_state) {
  return $form['filesfield']['filelist'];
}

//autocomplete callback function
function metabio_tags_autocomplete_callback($str = 0) {
  $matches = array();
  //vocabulary id
  $vid = db_select('taxonomy_vocabulary', 't')
    -> fields('t', array('vid'))
    -> condition('name','metabio_keywords','=')
    -> execute()
    -> fetchField();

  $result = db_select('taxonomy_term_data', 't')
    -> fields('t', array('tid', 'name'))
    -> condition('vid', $vid, '=')
    -> condition('name', $str.'%%', 'LIKE')
    -> range(0, 10)
    -> execute();
  foreach ($result as $term) {
    $matches[$term->name] = check_plain($term->name);
  }
  drupal_json_output($matches);
}


function metabio_newmeta(){
  module_load_include('inc', 'node', 'node.pages');
  $form = node_add('metabio'); 
  return drupal_render($form);
}

function metabio_metalist(){
  $block = module_invoke('metabio', 'block_view', 'metabio_datasets');
  return $block;
}


/**
 * Implements hook_block_info().
 */
function metabio_block_info() {
  $blocks = array();
  $blocks['metabio_datasets'] = array(
    'info' => t('A block to show metabio datasets'),
    'cache' => DRUPAL_NO_CACHE,
    'region' => 'content',
    'status' => TRUE,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'metabio_list'
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function metabio_block_view($block_name = '') {
  if ($block_name == 'metabio_datasets') {
    $header = array(
      array('data'=>t('Dataset name'),'field' => 'dataset_name'), 
      array('data'=>t('Last modified'),'field' => 'changed', 'sort' => 'desc'),
      );

    $query=db_select('metabio_dataset', 't')->extend('PagerDefault');
    $query->join('node','n','t.nid=n.nid');
    $query->fields('t', array('nid','dataset_name','dataset_description'));
    $query->fields('n', array('changed'));
    $query->extend('TableSort')->orderByHeader($header)->limit(100);

    $result = $query->execute();
    $rows = array();
    foreach ($result as $node) {
      $isnode = node_load($node->nid);
      $options = array('absolute' => TRUE);
      $url = url('node/' . $node->nid, $options);
      if(node_access('update',$node->nid)){
          $edit='<a href='.$url.'/edit>'.t('Edit').'</a>';
      }else{
        $edit='';
      }
      $rows[] = array('<a href='.$url.'>'.$node->dataset_name.'</a>',gmdate("Y-m-d",$node->changed),$edit);
    }

    //Return the content of the block
    $content=metabio_map(700,450).theme('table', array('header' => $header, 'rows' => $rows)).theme('pager');
    $block = array(
      'subject' => t('List of metabio datasets'),
      'content' => $content,
    );
    return $block;
  }
}


function metabio_map($width,$height){
  drupal_add_js('http://maps.google.com/maps/api/js?sensor=false');
  drupal_add_js(base_path().drupal_get_path('module', 'metabio') . '/javascript/metabio.map.js');
  drupal_add_js(array('metabio_mode' => 'view'), 'setting');
      $query=db_select('metabio_dataset', 't')
    -> fields('t', array('nid', 'dataset_name','geography'));
  $result = $query->execute();
  $output='';
  $geog=array();
  foreach($result as $n){
    $iw="<div><h3><b>".$n->dataset_name."</b></h3></div>";
    $geo=json_decode($n->geography);
    $geo->features[0]->properties=array(
      'nid'=>$n->nid,
      'infowin'=>$iw,
      );
    $geog[]=$geo->features[0];
  }
  $arr=array(
    'type'=>'FeatureCollection',
    'features' => $geog,
    );
  $output="<input type='hidden' name='geography' value='".json_encode($arr,JSON_UNESCAPED_SLASHES)."'>";
  $output.='<div id="map" style="width:100%;height:'.$height.'px;max-width: none;max-height:85%;"></div><br><br>';
  return $output;
}


?>

